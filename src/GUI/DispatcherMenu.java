package GUI;

import GUI.UpdateDialogs.TaxiServiceData;
import Utils.LoggedIn;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class DispatcherMenu {
    private JPanel mainPanel;
    private JPanel welcomePanel;
    private JPanel dispatcherMenuPanel;
    private JButton serviceDataButton;
    private JLabel welcomeLabel;
    private JButton vehiclesButton;
    private JButton ridesButton;
    private JButton driversBtn;
    private JButton phoneReservationsBtn;
    private JButton rideReportsBtn;
    private JButton appReservationBtn;
    private JButton searchVehicleBtn;
    private JButton auctionHistoryBtn;
    public static JFrame mainMenuWindow;

    public DispatcherMenu() {
        this.welcomeLabel.setText("Dobrodosli:  " + LoggedIn.getLoggedUser().getUsername());
        initActions();
        mainMenuWindow = new JFrame();
        mainMenuWindow.setTitle("Glavni meni");
        mainMenuWindow.setContentPane(this.mainPanel);
        mainMenuWindow.setLocationRelativeTo(null);
        mainMenuWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        mainMenuWindow.pack();
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(0, 0));
        mainPanel.setOpaque(false);
        mainPanel.setPreferredSize(new Dimension(500, 400));
        welcomePanel = new JPanel();
        welcomePanel.setLayout(new GridBagLayout());
        welcomePanel.setPreferredSize(new Dimension(400, 50));
        mainPanel.add(welcomePanel, BorderLayout.NORTH);
        welcomeLabel = new JLabel();
        welcomeLabel.setText("");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        welcomePanel.add(welcomeLabel, gbc);
        dispatcherMenuPanel = new JPanel();
        dispatcherMenuPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        dispatcherMenuPanel.setMinimumSize(new Dimension(300, 100));
        dispatcherMenuPanel.setPreferredSize(new Dimension(500, 300));
        dispatcherMenuPanel.setVisible(true);
        mainPanel.add(dispatcherMenuPanel, BorderLayout.CENTER);
        serviceDataButton = new JButton();
        serviceDataButton.setPreferredSize(new Dimension(180, 60));
        serviceDataButton.setText("Podaci o taksi sluzbi");
        dispatcherMenuPanel.add(serviceDataButton);
        driversBtn = new JButton();
        driversBtn.setPreferredSize(new Dimension(180, 60));
        driversBtn.setText("Vozaci");
        dispatcherMenuPanel.add(driversBtn);
        vehiclesButton = new JButton();
        vehiclesButton.setPreferredSize(new Dimension(180, 60));
        vehiclesButton.setText("Izmene vozila");
        dispatcherMenuPanel.add(vehiclesButton);
        ridesButton = new JButton();
        ridesButton.setPreferredSize(new Dimension(180, 60));
        ridesButton.setText("Voznje");
        dispatcherMenuPanel.add(ridesButton);
        appReservationBtn = new JButton();
        appReservationBtn.setPreferredSize(new Dimension(180, 60));
        appReservationBtn.setText("Rezervacije iz aplikacije");
        dispatcherMenuPanel.add(appReservationBtn);
        phoneReservationsBtn = new JButton();
        phoneReservationsBtn.setPreferredSize(new Dimension(180, 60));
        phoneReservationsBtn.setText("Rezervacije putem telefona");
        dispatcherMenuPanel.add(phoneReservationsBtn);
        rideReportsBtn = new JButton();
        rideReportsBtn.setPreferredSize(new Dimension(180, 60));
        rideReportsBtn.setText("Izvestaji");
        dispatcherMenuPanel.add(rideReportsBtn);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private void openTaxiServiceDialog() {
        TaxiServiceData serviceDialog = new TaxiServiceData();
        serviceDialog.taxiServiceWindow.setVisible(true);

    }

    private void openVehicleDialog() {
        VehicleWindow vehicleWindow = new VehicleWindow();
        vehicleWindow.vehicleWindow.setVisible(true);
    }

    private void openAppAssignDialog() {
        AuctionReservationAssigmentWindow assigmentWindow = new AuctionReservationAssigmentWindow();
        assigmentWindow.appRidesWindow.setVisible(true);
    }

    private void openVehicleSearchDialog() {
        VehicleSearchWindow vehicleWindow = new VehicleSearchWindow();
        vehicleWindow.vehicleWindow.setVisible(true);
    }

    private void openRideReportsDialog() {
        DispatcherRidesReportWidnow ridesReportDialog = new DispatcherRidesReportWidnow();
        ridesReportDialog.reportsWindow.setVisible(true);
    }

    private void openAuctionHistoryWindow() {
        AuctionHistoryWindow assigmentWindow = new AuctionHistoryWindow();
        assigmentWindow.auctionsWindow.setVisible(true);
    }
    private void initActions() {
        this.serviceDataButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openTaxiServiceDialog();
            }
        });

        this.vehiclesButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openVehicleDialog();
            }
        });

        this.appReservationBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openAppAssignDialog();
            }
        });

        this.searchVehicleBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openVehicleSearchDialog();
            }
        });

        this.rideReportsBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openRideReportsDialog();
            }
        });

        this.auctionHistoryBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openAuctionHistoryWindow();
            }
        });
    }

}
