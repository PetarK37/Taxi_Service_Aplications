package GUI.UpdateDialogs;

import Auction.*;
import Controllers.AuctionController;
import Controllers.RideController;
import Controllers.ServiceController;
import Entities.AppReservation;
import Entities.User;
import Enums.ReservationStatus;
import Enums.VehicleType;
import Exceptions.SaveExcption;
import Repositories.AuctionFileRepository;
import Repositories.RidesFileRepository;
import Enums.*;
import Utils.LoggedIn;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.GregorianCalendar;
import List.LinkedList;

public class AppReservationDialog {
    private JPanel mainPanel;
    private JTextField startAdressFeild;
    private JLabel startAdressLabel;
    private JTextField arrivalAdressFeild;
    private JLabel noteLabel;
    private JTextField noteFeild;
    private JLabel arivalAdressLabel;
    private JButton orederBtn;
    private JCheckBox petFriendlyCheckBox;
    private JCheckBox newerWehiclesCheckBox;
    private JLabel typeLabel;
    private JComboBox<VehicleType> typeBox;
    public static JFrame appReservationWindow;


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        mainPanel.setPreferredSize(new Dimension(350, 250));
        startAdressLabel = new JLabel();
        startAdressLabel.setText("Adresa polaska:");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.ipadx = 10;
        mainPanel.add(startAdressLabel, gbc);
        startAdressFeild = new JTextField();
        startAdressFeild.setPreferredSize(new Dimension(200, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 10, 0, 0);
        mainPanel.add(startAdressFeild, gbc);
        arivalAdressLabel = new JLabel();
        arivalAdressLabel.setText("Adresa dolaska:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.ipadx = 10;
        mainPanel.add(arivalAdressLabel, gbc);
        arrivalAdressFeild = new JTextField();
        arrivalAdressFeild.setMargin(new Insets(2, 6, 2, 6));
        arrivalAdressFeild.setPreferredSize(new Dimension(200, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 10, 0, 0);
        mainPanel.add(arrivalAdressFeild, gbc);
        noteLabel = new JLabel();
        noteLabel.setText("Napomena:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.ipadx = 10;
        mainPanel.add(noteLabel, gbc);
        noteFeild = new JTextField();
        noteFeild.setMargin(new Insets(2, 6, 2, 6));
        noteFeild.setPreferredSize(new Dimension(200, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 10, 0, 0);
        mainPanel.add(noteFeild, gbc);
        orederBtn = new JButton();
        orederBtn.setLabel("Naruci");
        orederBtn.setPreferredSize(new Dimension(50, 30));
        orederBtn.setText("Naruci");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 20, 10, 20);
        mainPanel.add(orederBtn, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    public AppReservationDialog() {
        appReservationWindow = new JFrame();
        appReservationWindow.setTitle("Naruci voznju putem aplikacije");
        appReservationWindow.setContentPane(this.mainPanel);
        appReservationWindow.setLocationRelativeTo(null);
        appReservationWindow.pack();
        this.typeBox.setModel(new DefaultComboBoxModel<>(VehicleType.values()));



        initActions();
    }

    private void initActions() {
        this.orederBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                orederRide();
            }
        });

    }

    private boolean validation() {
        boolean isValid = true;

        String message = "Molimo vas ispravite sledece greske prilkom unosa:\n";
        if (this.startAdressFeild.getText().trim().equals("")) {
            message += "Morate uneti adresu polaska \n";
            isValid = false;
        }
        if (this.arrivalAdressFeild.getText().trim().equals("")) {
            message += "Morate uneti adresu dolaska \n";
            isValid = false;
        }
        if (this.noteFeild.getText().equals("")) {
            this.noteFeild.setText("-");
        }

        if (isValid == false) {
            JOptionPane.showMessageDialog(null, message, "Neispravni podaci", JOptionPane.WARNING_MESSAGE);
        }
        return isValid;
    }

    private void orederRide() {
        if (validation()) {
            AppReservation reservation = new AppReservation(new GregorianCalendar(), this.startAdressFeild.getText().trim(),
                    this.arrivalAdressFeild.getText().trim(), 0.0, 0, 0, ReservationStatus.CREATED_ON_HOLD, RideController.generateId(LoggedIn.getService().getRides()),
                    null, (User) LoggedIn.getLoggedUser(), this.noteFeild.getText(), 0);

            Auction newAuction = new Auction(AuctionController.generateId(LoggedIn.getService().getAuctions()),reservation,
                    this.petFriendlyCheckBox.isSelected(),this.newerWehiclesCheckBox.isSelected(), (VehicleType) this.typeBox.getSelectedItem(),new LinkedList<Offer>());

            RideController.CreateNewAppReservation(LoggedIn.getService().getRides(), reservation);
            AuctionController.CreateNewAuction(LoggedIn.getService().getAuctions(), newAuction);

            try {
                RidesFileRepository.writeAllRides(LoggedIn.getService().getRides());
                AuctionFileRepository.writeAllAuctions(LoggedIn.getService().getAuctions());
            } catch (SaveExcption e) {
                JOptionPane.showMessageDialog(null, "Greska prilikom cuvanja podataka u bazu", "Greska", JOptionPane.WARNING_MESSAGE);
            }
            JOptionPane.showMessageDialog(null, "Uspesno porucena voznja", "Porucivanje voznje", JOptionPane.INFORMATION_MESSAGE);
        }
    }
}
